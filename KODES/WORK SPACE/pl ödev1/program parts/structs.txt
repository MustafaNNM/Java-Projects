struct comment {
        int kume_parantez_on;//on=1 -> there is '{' else there isn't
        char *any_character_set;//any character set other than '}'
        int kume_parantez_off;//off=1 -> there is '}' else there isn't
};
struct empty {
        char *empty;
};
struct identifier {
        char *letter_digit;//<identifier> ::= <letter> { <letter or digit> }
};
struct new_identifier {
        Identifier identifier;
        int index_no_of_virgul;//index no of special_symbol
        struct new_identifier *new_identifier;
};
struct integer_constant {
        int digits_constant;
};
struct index_range {
        Integer_constant integer_constant_min;
        int iki_nokta_yanyana;
        Integer_constant integer_constant_max;
};
struct simple_type {
        int special_symbol;//index no of special_symbol
};
struct array_type {
        int index_no_of_array;
        int koseli_parantez_acma;
        Index_range index_range;
        int koseli_parantez_kapama;
        int index_no_of_of;
        Simple_type simple_type;
};
struct type {
        Simple_type simple_type;
        Array_type array_type;
};
struct variable_declaration {
        Identifier identifier;
        New_identifier new_identifier;
        int iki_nokta_ust_uste;//index no of special_symbol
        Type type;
};
struct new_variable_declaration {
        Variable_declaration variable_declaration;
        int index_no_of_n_virgul;//index no of special_symbol
        New_variable_declaration *new_variable_declaration;
};
struct variable_declaration_part {
        int type;
        Empty empty;
        int index_no_of_var;//index no of special_symbol
        New_variable_declaration new_variable_declaration;
};
struct procedure_declaration {
        int index_no_of_procedure;
        Identifier identifier;
        int index_no_of_n_virgul;
        Block *block;
};
struct new_procedure_declaration_part {
        Procedure_declaration procedure_declaration;
        int index_no_of_n_virgul;
        New_procedure_declaration_part *new_procedure_declaration_part;
};
struct procedure_declaration_part {
        New_procedure_declaration_part new_procedure_declaration_part;
};
struct variable_identifier {
        Identifier identifier;
};
struct entire_variable {
        Variable_identifier variable_identifier;
};
struct array_variable {
        Entire_variable entire_variable;
};
struct indexed_variable {
        Array_variable array_variable;
        int kapali_parantez_on;//index no of special_symbol
        Expression *expression;
        int kapali_parantez_off;//index no of special_symbol
};
struct variable {
        int type;
        Entire_variable entire_variable;
        Indexed_variable indexed_variable;
};
struct iki_tirnak_arasi {
        int index_no_of_on;//index no of special_symbol
        char any_character;//any character other than '
        int index_no_of_off;//index no of special_symbol
};
struct dort_tirnak {
        Empty empty;
};
struct character_constant {
        int type;
        Iki_tirnak_arasi iki_tirnak_arasi;
        Dort_tirnak dort_tirnak;
};
struct constant_identifier {
        Identifier identifier;
};
struct constant {
        int type;
        Integer_constant integer_constant;
        Character_constant character_constant;
        Constant_identifier constant_identifier;
};
struct parantezli_expression {
        int parantez_on;//index no of special_symbol
        Expression *expression;
        int parantez_off;//index no of special_symbol
};
struct factor {
        int type;
        Variable variable;
        Constant constant;
        Parantezli_expression parantezli_expression;
        int index_no_of_not;//index no of special_symbol
        Factor *not_factor;
};
struct carpim_devami {
        int multiplying_operator;
        Factor factor;
        Carpim_devami *sonraki_carpim_devami;
};
struct term {
        Factor factor;
        Carpim_devami carpim_devami;
};
struct toplama_devami {
        int adding_operator;
        Term term;
        Toplama_devami *toplama_devami;
};
struct simple_expression {
        int sing_type;
        Term term;
        Toplama_devami toplama_devami;
};
struct complex_expression {
        Simple_expression simple_expression_1;
        int relational_operator_no;
        Simple_expression simple_expression_2;
};
struct expression {
        int type;
        Simple_expression simple_expression;
        Complex_expression complex_expression;
};
struct assignment_statement {
        Variable variable;
        int index_no_of_define;
        Expression expression;
};
struct procedure_identifier {
        Identifier identifier;
};
struct procedure_statement {
        Procedure_identifier procedure_identifier;
};
struct input_variable {
        Variable variable;
};
struct output_variable {
        Expression expression;
};
struct new_input_variable {
        int index_no_of_virgul;
        Input_variable input_variable;
        New_input_variable *new_input_variable;
};
struct new_output_variable {
        int index_no_of_virgul;
        Output_variable input_variable;
        New_output_variable *new_output_variable;
};
struct read_statement {
        int index_no_of_read;
        int parantez_on;
        Input_variable input_variable;
        New_input_variable new_input_variable;
        int parantez_off;
};
struct write_statement {
        int index_no_of_write;
        int parantez_on;
        Output_variable output_variable;
        New_output_variable new_output_variable;
        int parantez_off;
};
struct simple_statement {
        Assignment_statement assignment_statement;
        Procedure_statement procedure_statement;
        Read_statement read_statement;
        Write_statement write_statement;
};
struct if_then {
        int index_no_of_if;
        Expression expression;
        int index_no_of_then;
        Statement *statement;
};
struct if_then_else {
        If_then if_then;
        int index_no_of_else;
        Statement *statement;
};
struct if_statement {
        int type;
        If_then if_then;
        If_then_else if_then_else;
};
struct while_statement {
        int index_no_of_while;
        Expression expression;
        int index_no_of_do;
        Statement *statement;
};
struct structured_statement {
        int type;
        Compound_statement *compound_statement;
        If_statement if_statement;
        While_statement while_statement;
};
struct statement {
        int type;
        Simple_statement simple_statement;
        Structured_statement structured_statement;
};
struct new_statement {
        int index_no_of_n_virgul;
        Statement statement;
        New_statement *new_statement;
};
struct compound_statement {
        int index_no_of_begin;
        Statement statement;
        New_statement new_statement;
        int index_no_of_end;
};
struct statement_part {
        Compound_statement compound_statement;
};
struct block {
        Variable_declaration_part variable_declaration_part;
        Procedure_declaration_part procedure_declaration_part;
        Statement_part statement_part;
};
struct program {
        int index_no_of_program;//index no of special_symbol_1=36
        Identifier identifier;
        int index_no_of_n_virgul;//index no of special_symbol_2
        Block block;
        int index_no_of_nokta;//index no of special_symbol_3
};