void printf_comment(Comment *comment);
void printf_empty(Empty *empty);
void printf_identifier(Identifier *identifier);
void printf_new_identifier_ptr(New_identifier *suandaki_new_identifier);
void printf_new_identifier(New_identifier *suandaki_new_identifier);
void printf_integer_constant(Integer_constant *integer_constant);
void printf_index_range(Index_range *index_range);
void printf_simple_type(Simple_type *simple_type);
void printf_array_type(Array_type *array_type);
void printf_type(Type *type);
void printf_variable_declaration(Variable_declaration *variable_declaration);
void printf_new_variable_declaration_ptr(New_variable_declaration *suandaki_new_variable_declaration);
void printf_new_variable_declaration(New_variable_declaration *new_variable_declaration);
void printf_variable_declaration_part(Variable_declaration_part *variable_declaration_part);
void printf_procedure_declaration(Procedure_declaration *procedure_declaration);
void printf_new_procedure_declaration_part(New_procedure_declaration_part *new_procedure_declaration_part);
void printf_procedure_declaration_part(Procedure_declaration_part *procedure_declaration_part);
void printf_variable_identifier(Variable_identifier *variable_identifier);
void printf_entire_variable(Entire_variable *entire_variable);
void printf_array_variable(Array_variable *array_variable);
void printf_indexed_variable(Indexed_variable *indexed_variable);
void printf_variable(Variable *variable);
void printf_iki_tirnak_arasi(Iki_tirnak_arasi *iki_tirnak_arasi);
void printf_dort_tirnak(Dort_tirnak *dort_tirnak);
void printf_character_constant(Character_constant *character_constant);
void printf_constant_identifier(Constant_identifier *constant_identifier);
void printf_constant(Constant *constant);
void printf_parantezli_expression(Parantezli_expression *parantezli_expression);
void printf_factor(Factor *factor);
void printf_carpim_devami(Carpim_devami *carpim_devami);
void printf_term(Term *term);
void printf_toplama_devami(Toplama_devami *toplama_devami);
void printf_simple_expression(Simple_expression *simple_expression);
void printf_complex_expression(Complex_expression *complex_expression);
void printf_expression(Expression *expression);
void printf_assignment_statement(Assignment_statement *assignment_statement);
void printf_procedure_identifier(Procedure_identifier *procedure_identifier);
void printf_procedure_statement(Procedure_statement *procedure_statement);
void printf_input_variable(Input_variable *input_variable);
void printf_output_variable(Output_variable *output_variable);
void printf_new_input_variable(New_input_variable *new_input_variable);
void printf_new_output_variable(New_output_variable *new_output_variable);
void printf_read_statement(Read_statement *read_statement);
void printf_write_statement(Write_statement *write_statement);
void printf_simple_statement(Simple_statement *simple_statement);
void printf_if_then(If_then *if_then);
void printf_if_then_else(If_then_else *if_then_else);
void printf_if_statement(If_statement *if_statement);
void printf_while_statement(While_statement *while_statement);
void printf_structured_statement(Structured_statement *structured_statement);
void printf_statement(Statement *statement);
void printf_new_statement(New_statement *new_statement);
void printf_compound_statement(Compound_statement *compound_statement);
void printf_statement_part(Statement_part *statement_part);
void printf_block(Block *block);
void printf_program(Program *program);