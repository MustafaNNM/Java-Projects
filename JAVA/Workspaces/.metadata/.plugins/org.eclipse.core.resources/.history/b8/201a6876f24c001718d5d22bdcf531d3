package denemeyedevam;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.imageio.IIOException;
import javax.imageio.ImageIO;
import javax.servlet.ServletException;

import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.util.Enumeration;

import org.eclipse.jetty.server.Server;
import org.eclipse.jetty.server.Request;
import org.eclipse.jetty.server.handler.AbstractHandler;

public class HelloWorld extends AbstractHandler {
	private static int IMG_WIDTH = 500;
	private static boolean is_IMG_WIDTH_received = false;
	private static int IMG_HEIGHT = 500;
	private static boolean is_IMG_HEIGHT_received = false;
	private static String IMG_COLOR = "DEFAULT";
	private static boolean is_IMG_COLOR_received = false;
	private static boolean is_IMG_UNKNOWN_received = false;
	private static BufferedImage resizedImage;
	private static Graphics2D g;
	private Enumeration<String> parameterNames;
	private String name;
	private String value;
	private boolean hata_var_mý = false;
	private String images_folder_path = "C:\\Users\\MehmetAkif-PC\\Google Drive\\Google Foto\\bihap\\";
	private String image_name = "anime_girl_12-wallpaper-2560x1440.jpg";
	private BufferedImage originalImage;
	private int type;
	private static int port;
	private static Server server;
	// BufferedImage createResizedCopy()
	private static BufferedImage resizeImage(BufferedImage originalImage, int type) {
		resizedImage = new BufferedImage(IMG_WIDTH, IMG_HEIGHT, type);
		g = resizedImage.createGraphics();
		g.drawImage(originalImage, 0, 0, IMG_WIDTH, IMG_HEIGHT, null);
		g.dispose();
		return resizedImage;
	}

	public void handle(String target, Request baseRequest, HttpServletRequest request, HttpServletResponse response)
			throws IOException, ServletException {
		response.setContentType("text/html;charset=utf-8");
		image_name = request.getRequestURI();
		if (image_name.startsWith("/img/")) {
			// System.out.println("resim adý:" + image_name);
			image_name = image_name.substring(5);
			parameterNames = request.getParameterNames();
			while (parameterNames.hasMoreElements()) {
				name = (String) parameterNames.nextElement();
				value = request.getParameter(name).toString();
				// System.out.println(String.format("%s==%s\n", name, value));
				if (name.startsWith("width")) {
					IMG_WIDTH = Integer.parseInt(request.getParameter(name));
					if (IMG_WIDTH > 0) {
						is_IMG_WIDTH_received = true;
						// System.out.println("geniþlik:" + IMG_WIDTH);
						continue;
					} else {
						hata_var_mý = true;
						response.setStatus(HttpServletResponse.SC_OK);
						baseRequest.setHandled(true);
						return;
					}
				} else {
					if (name.startsWith("height")) {
						IMG_HEIGHT = Integer.parseInt(request.getParameter(name));
						if (IMG_HEIGHT > 0) {
							is_IMG_HEIGHT_received = true;
							// System.out.println("yükseklik:" + IMG_HEIGHT);
							continue;
						} else {
							hata_var_mý = true;
							response.setStatus(HttpServletResponse.SC_OK);
							baseRequest.setHandled(true);
							return;
						}
					} else {
						if (name.startsWith("color")) {
							setIMG_COLOR(request.getParameter(name));
							if (IMG_COLOR.startsWith("GRAY")) {
								is_IMG_COLOR_received = true;
								// System.out.println("renk:" + IMG_COLOR);
								continue;
							} else {
								hata_var_mý = true;
								is_IMG_UNKNOWN_received = true;
								response.setStatus(HttpServletResponse.SC_OK);
								baseRequest.setHandled(true);
								return;
							}
							// response.getWriter().println("geniþlik:"+width);
						} else {
							hata_var_mý = true;
							// System.out.println("bilinmeyen paramatre");
							response.setStatus(HttpServletResponse.SC_OK);
							baseRequest.setHandled(true);
							return;
						}
					}
				}
			}
			if (is_IMG_WIDTH_received) {
				if (is_IMG_HEIGHT_received) {
					if (is_IMG_COLOR_received) {
						// Scale & Color Transformation
						// is_IMG_WIDTH_received=true;
						// is_IMG_HEIGHT_received=true;
						// is_IMG_COLOR_received=true;
					} else {
						// Scale Transformation
						// is_IMG_WIDTH_received=true;
						// is_IMG_HEIGHT_received=true;
						// is_IMG_COLOR_received=false;
						originalImage = null;
						try {
							originalImage = ImageIO.read(new File("" + images_folder_path + image_name));
						} catch (IIOException e) {
							hata_var_mý = true;
							e.printStackTrace();
						}
						if (hata_var_mý == false) {
							response.setHeader("Content-Type", "image/jpg");
							type = originalImage.getType() == 0 ? BufferedImage.TYPE_INT_ARGB : originalImage.getType();
							originalImage = resizeImage(originalImage, type);
							ImageIO.write(originalImage, "jpg", response.getOutputStream());
							baseRequest.setHandled(true);
							response.setStatus(HttpServletResponse.SC_OK);
						} else {
							response.setStatus(HttpServletResponse.SC_OK);
							baseRequest.setHandled(true);
						}
					}
				} else {
					hata_var_mý = true;
					response.setStatus(HttpServletResponse.SC_OK);
					baseRequest.setHandled(true);
					return;
				}
			} else {
				if (is_IMG_HEIGHT_received) {
					hata_var_mý = true;
					response.setStatus(HttpServletResponse.SC_OK);
					baseRequest.setHandled(true);
					return;
				} else {
					if (is_IMG_COLOR_received) {
						// Color Transformation
						// is_IMG_WIDTH_received=false;
						// is_IMG_HEIGHT_received=false;
						// is_IMG_COLOR_received=true;
					} else {
						hata_var_mý = true;
						response.setStatus(HttpServletResponse.SC_OK);
						baseRequest.setHandled(true);
						return;
						// is_IMG_WIDTH_received=false;
						// is_IMG_HEIGHT_received=false;
						// is_IMG_COLOR_received=false;
					}
				}
			}
		}
	}

	public static void main(String[] args) throws Exception {
		port = 8080;
		server = new Server(port);
		server.setHandler(new HelloWorld());
		server.start();
		server.join();
	}

	/**
	 * @return the iMG_COLOR
	 */
	public static String getIMG_COLOR() {
		return IMG_COLOR;
	}

	/**
	 * @param iMG_COLOR
	 *            the iMG_COLOR to set
	 */
	public static void setIMG_COLOR(String iMG_COLOR) {
		IMG_COLOR = iMG_COLOR;
	}

	/**
	 * @return the is_IMG_WIDTH_received
	 */
	public static boolean isIs_IMG_WIDTH_received() {
		return is_IMG_WIDTH_received;
	}

	/**
	 * @param is_IMG_WIDTH_received
	 *            the is_IMG_WIDTH_received to set
	 */
	public static void setIs_IMG_WIDTH_received(boolean is_IMG_WIDTH_received) {
		HelloWorld.is_IMG_WIDTH_received = is_IMG_WIDTH_received;
	}

	/**
	 * @return the is_IMG_HEIGHT_received
	 */
	public static boolean isIs_IMG_HEIGHT_received() {
		return is_IMG_HEIGHT_received;
	}

	/**
	 * @param is_IMG_HEIGHT_received
	 *            the is_IMG_HEIGHT_received to set
	 */
	public static void setIs_IMG_HEIGHT_received(boolean is_IMG_HEIGHT_received) {
		HelloWorld.is_IMG_HEIGHT_received = is_IMG_HEIGHT_received;
	}

	/**
	 * @return the is_IMG_COLOR_received
	 */
	public static boolean isIs_IMG_COLOR_received() {
		return is_IMG_COLOR_received;
	}

	/**
	 * @param is_IMG_COLOR_received
	 *            the is_IMG_COLOR_received to set
	 */
	public static void setIs_IMG_COLOR_received(boolean is_IMG_COLOR_received) {
		HelloWorld.is_IMG_COLOR_received = is_IMG_COLOR_received;
	}

	/**
	 * @return the is_IMG_UNKNOWN_received
	 */
	public static boolean isIs_IMG_UNKNOWN_received() {
		return is_IMG_UNKNOWN_received;
	}

	/**
	 * @param is_IMG_UNKNOWN_received
	 *            the is_IMG_UNKNOWN_received to set
	 */
	public static void setIs_IMG_UNKNOWN_received(boolean is_IMG_UNKNOWN_received) {
		HelloWorld.is_IMG_UNKNOWN_received = is_IMG_UNKNOWN_received;
	}

	/**
	 * @return the iMG_WIDTH
	 */
	public static int getIMG_WIDTH() {
		return IMG_WIDTH;
	}

	/**
	 * @param iMG_WIDTH the iMG_WIDTH to set
	 */
	public static void setIMG_WIDTH(int iMG_WIDTH) {
		IMG_WIDTH = iMG_WIDTH;
	}

	/**
	 * @return the iMG_HEIGHT
	 */
	public static int getIMG_HEIGHT() {
		return IMG_HEIGHT;
	}

	/**
	 * @param iMG_HEIGHT the iMG_HEIGHT to set
	 */
	public static void setIMG_HEIGHT(int iMG_HEIGHT) {
		IMG_HEIGHT = iMG_HEIGHT;
	}

	/**
	 * @return the resizedImage
	 */
	public static BufferedImage getResizedImage() {
		return resizedImage;
	}

	/**
	 * @param resizedImage the resizedImage to set
	 */
	public static void setResizedImage(BufferedImage resizedImage) {
		HelloWorld.resizedImage = resizedImage;
	}

	/**
	 * @return the g
	 */
	public static Graphics2D getG() {
		return g;
	}

	/**
	 * @param g the g to set
	 */
	public static void setG(Graphics2D g) {
		HelloWorld.g = g;
	}

	/**
	 * @return the parameterNames
	 */
	public Enumeration<String> getParameterNames() {
		return parameterNames;
	}

	/**
	 * @param parameterNames the parameterNames to set
	 */
	public void setParameterNames(Enumeration<String> parameterNames) {
		this.parameterNames = parameterNames;
	}

	/**
	 * @return the name
	 */
	public String getName() {
		return name;
	}

	/**
	 * @param name the name to set
	 */
	public void setName(String name) {
		this.name = name;
	}

	/**
	 * @return the value
	 */
	public String getValue() {
		return value;
	}

	/**
	 * @param value the value to set
	 */
	public void setValue(String value) {
		this.value = value;
	}

	/**
	 * @return the hata_var_mý
	 */
	public boolean isHata_var_mý() {
		return hata_var_mý;
	}

	/**
	 * @param hata_var_mý the hata_var_mý to set
	 */
	public void setHata_var_mý(boolean hata_var_mý) {
		this.hata_var_mý = hata_var_mý;
	}

	/**
	 * @return the images_folder_path
	 */
	public String getImages_folder_path() {
		return images_folder_path;
	}

	/**
	 * @param images_folder_path the images_folder_path to set
	 */
	public void setImages_folder_path(String images_folder_path) {
		this.images_folder_path = images_folder_path;
	}

	/**
	 * @return the image_name
	 */
	public String getImage_name() {
		return image_name;
	}

	/**
	 * @param image_name the image_name to set
	 */
	public void setImage_name(String image_name) {
		this.image_name = image_name;
	}

	/**
	 * @return the originalImage
	 */
	public BufferedImage getOriginalImage() {
		return originalImage;
	}

	/**
	 * @param originalImage the originalImage to set
	 */
	public void setOriginalImage(BufferedImage originalImage) {
		this.originalImage = originalImage;
	}

	/**
	 * @return the type
	 */
	public int getType() {
		return type;
	}

	/**
	 * @param type the type to set
	 */
	public void setType(int type) {
		this.type = type;
	}

	/**
	 * @return the port
	 */
	public static int getPort() {
		return port;
	}

	/**
	 * @param port the port to set
	 */
	public static void setPort(int port) {
		HelloWorld.port = port;
	}

	/**
	 * @return the server
	 */
	public static Server getServer() {
		return server;
	}

	/**
	 * @param server the server to set
	 */
	public static void setServer(Server server) {
		HelloWorld.server = server;
	}
}